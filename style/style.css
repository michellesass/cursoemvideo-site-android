/* Regras! Todas as regras do documento CSS s√£o colocadas sempre no in√≠cio do c√≥digo com o @ */

/* @charset "UTF-8" √© encontrado do DOCTYPE do HTML5 e tem o mesmo prop√≥sito aqui: fazer com que o documento aceite acentua√ß√£o. J√° que estamos no Brasil e utilizamos '√ß' e v√°rios tipos de acentos √© importante sempre colocarmos essa regra. */

/*@import √© para importar fontes do Google Fonts (fontes externas n√£o baixadas). Vantagem: n√£o pesa seu site j√° que dessa forma a letra carrega utilizando a internet e o Google Fonts. Sem a internet a letra n√£o vai carregar, mas estamos lidando com sites e sem internet n√£o conseguimos acessar o site tamb√©m. Ent√£o tudo certo!*/

/* @font-face { font-family e src} √© utilizada para colocar fontes baixadas, que j√° est√£o no seu computador, no documento CSS. Desvantagem: pesa mais o site. S√≥ fazer isso quando seu cliente realemente quiser uma determinada fonte que ele comprou. Algo bem mais personalizado e espec√≠fico. */

@charset "UTF-8";

@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');

@font-face {
    font-family: 'Android' ;
    src: url(../fontes/idroid.otf) format('opentype');
    font-weight: normal;
}


:root{ /* Aplica√ß√£o de vari√°veis */
/* Por que as vari√°veis s√£o importantes? Facilitam horrores a manuten√ß√£o do seu site. Imagina: seu cliente pede para trocar a paleta de cores do site e voc√™ vai ter que ir linha por linha alterando as cores. Com as vari√°veis voc√™ pode colocar um determinado c√≥digo para cada cor/letra etc e quando precisar fazer a manuten√ß√£o √© s√≥ alterar a vari√°vel. */
    --cor0:#c5ebd6;
    --cor1:#83e1ad;
    --cor2:#3ddc84;
    --cor3:#2fa866;
    --cor4:#1a5c37;
    --cor5:#063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: 'Bebas Neue', sans-serif;
    --fonte-android: 'Android', sans-serif;
}

* { /* S√≠mbolo GLOBAL: pega simplesmente tudo do seu site. Aqui foi tirado a margem e o padding de TODOS os elementos. Ficaram todos grudados um no outro. Bem melhor de editar o site assim. Muitas vezes a margem e o padding das caixas que j√° v√™m como padr√£o do navegador atrapalham muito a edi√ß√£o e voc√™ tem que ficar procurando de quem √© aquele espa√ßo que n√£o est√° se unindo com a outra caixa que voc√™ tinha editado para ficarem unidas ou aquele bendito 1px do rodap√© que fica parecendo uns 40px porque pega a margem do par√°grafo que est√° nele com um espa√ßo de 16px. */
    margin: 0px;
    padding: 0px;
}

body{
    background-color: var(--cor0);
    font-family: var(--fonte-padrao);
}

header {
    background-image: linear-gradient(to bottom, var(--cor3), var(--cor5));
    min-height: 150px; /* Altura m√≠nima para ficar ok em todos os dispositivos. */
    text-align: center; /* Se isso n√£o funcionar tem que fazer um por um: diretamente no 
    'header > h1' e no 'header > p' . Mas funcionou \o/ */
    padding-top: 40px; /* Para n√£o deixar o h1 t√£o grudado com colado com o navegador. */
}

header > h1{
    color: white ;
    font-family: var(--fonte-destaque);
    font-size: 3em;
    font-weight: normal; /* Utilizamos o 'normal' quando n√£o queremos nenhuma aplica√ß√£o a mais, por exemplo, o negrito padr√£o que vem com o h1. */
    margin-bottom: 20px;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.26);
}

header > p{
    color: white;
    font-family: var(--fonte-padrao);
    font-size: 1.2em;
    max-width: 600px; /* Menos de 600px o texto tem que quebrar. */
    margin: auto; /* Foi preciso colocar um 'margin: auto;' neste caso para o texto continuar centralizado, porque no momento em que foi colocado um 'max-widht' o texto se tornou um bloco, n√£o mais um texto somente. */
    margin-bottom: 30px;
    padding-right: 10px;
    padding-left: 10px;
    text-shadow: 2px 2px 0px rgba(0, 0, 0, 0.322);
}

nav{
    background-color: var(--cor5);
    padding: 10px;
    box-shadow: 0px 7px 7px rgba(0, 0, 0, 0.192);
}

nav > a {
    color: var(--cor1);
    padding: 10px;
    text-decoration: none;
    font-weight: bold;
    border-radius: 5px;
    transition-duration: 0.5s; /* Tempo de dura√ß√£o do efeito que aparece quando passamos o mouse por cima dos links do menu. Quando passar o mouse em cima o efeito vai demorar 0.5s (neste caso) para aparecer terminar sua transi√ß√£o. Particularmente n√£o gostei, mas deixei por aprendizado j√° que n√£o tem na apostila. */
}

nav > a:hover { /* Quando passar o mouse por cima dos links do menu... */
    background-color: var(--cor3); /* ... a cor do fundo vai mudar... */
    color: var(--cor4); /* ...e a cor da letra tamb√©m vai mudar para dar um contraste com a cor de fundo que escolhemos. */
}

a.externo::after{ /* esse '::after' significa que tudo o que voc√™ colocar nesse comando vai ficar depois da palavra que estiver com a classe externo. Por exemplo, neste caso, todo link com a classe externo ter√° um emoji de corrente (simbolizando um link) depois do seu escrito: Dan Morrill üîó 
E o '00A0' j√° vimos que signfica 'espa√ßo'. Vai dar um espa√ßo entre a palavra e o emoji.*/
    content: '\00A0\1F517';
}

main{
    background-color: white;
    min-width: 300px; /* Menos que isso o main m√£o se adequa √† tela e aparece a barra de rolagem lateral (aquela que fica em baixo, n√£o a padr√£o que rola de cima para baixo e vice-versa). Uma observa√ß√£o: Geralmente √© utilizado a refer√™ncia de 320px como m√≠nimo, pois representa a tela dos celulares mais antigos, que tinham telas menores que os de hoje. Portanto √© uma m√≠nima mais segura, porque como a maioria tem celular mais recentes √© certo que o conte√∫do vai ficar certinho na tela.*/
    max-width: 1000px; /* M√°ximo de tamanho em que o main se expande. Depois desse tamanho ele se mant√©m em 1000px de largura para n√£o ficar aqueles textos super esticados que voc√™ tem que ficar movendo a cabe√ßa de um lado para o outro para tentar ler o que est√° escrito. Tanto essa medida quando o 'min-width' s√£o vari√°veis, de acordo com seu gosto/prop√≥sito. */
    margin: auto; /* Centralizando o main independente do tamanho da tela.*/
    margin-bottom: 30px; /* Para afastar o conte√∫do principal do rodap√©. */
    padding: 20px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.418); /* Esse '10px' √© o espalhamento. */
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}

main img{
    width: 100%; /* Assim a imagem preenche todo o espa√ßo das laterais (width) do main e n√£o fica aquelas bordas brancas independente se o main expande ou diminui com o tamanho da tela do navegador. */
}

main img.pequena{
    max-width: 350px; /* j√° que n√£o tinha outra imagem do cara com um robozinho num tamanho menor, essa foi a sugest√£o do Guanabara para deixar a imagem sem sofrer uma distor√ß√£o quando o tamanho da tela aumentar (asism ela n√£o fica cheia de pixel) e n√£o ficar pequena demais quando o tela for pequena. */
    display: block; /* A imagem (img) por si s√≥ n√£o √© um bloco, por isso para fazer com que o 'margin: auto' funcionasse foi necess√°rio transformar a imagem em um bloco utilizando o 'display: block'. */
    margin: auto; /* Utilizada para deixar a imagem no centro do main. */
}

main h1{
    color: var(--cor5);
    font-family: var(--fonte-android);
    font-weight: normal;
    font-size: 1.8em; /* O 'em' vai sempre pegar como refer√™ncia o tamanho de fonte padr√£o do navegador (geralmete √© 16px) e vai multiplicar pelo valor que voc√™ escolher. Neste caso, o navegador est√° pegando o 16px e multiplicando por 1.8. Sendo assim, 'em' √© uma medida relativa */
}

main h2{
    color:var(--cor4);
    font-family: var(--fonte-android);
    font-size: 1.3em;
    font-weight: normal;
    background-image: linear-gradient(to right, var(--cor1), transparent); /* Usar o 'transparent' no final faz com que o degrad√™ v√° diminuindo de cor at√© sumir por completo. */
    text-indent: 8px; /* Poderia ser o padding tamb√©m, mas o Guanabara preferiu usar o indent. */
}

main p{ /* Quando √© escrito um comando dessa forma significa todos os <p> em algum n√≠vel que estejam dentro do main, ou seja, pode ser o par√°grafo que esteja dentro de um article que est√° dentro do main ou um par√°grafo que esteja dentro de uma div, mas que est√° dentro do main. Enfim, para TODOS os par√°grafos do main. Se eu coloco 'main > p' ele s√≥ vai considerar os par√°grafos que est√£o diretamente como filhos do main, os par√°grafos que est√£o dentro de um article ou de uma div n√£o receber√£o o comando. */
    margin: 15px 0px;
    text-align: justify;
    text-indent: 30px;
    font-size: 1em;
    line-height: 2em; /* Altura entre linhas */
}

main strong{
    color: var(--cor4);
    font-weight: bold;
}

main a{
    text-decoration: none;
    font-weight: bold;
    color: var(--cor5);
    background-color: var(--cor1);
    padding: 2px 6px;
    border-radius: 5px;
}

main a:hover{
    text-decoration: underline;
    color: var(--cor4);
}

div.video{
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px; /* Esse -20px veio da soma de 10px do artigo + 10px do main */
    padding: 20px;
    position: relative;
    height: 0px;
    padding-bottom: 56.6%; /* Essa medida est√° relacionada com uma borda preta nas laterais do v√≠deo. Aqui √© s√≥ ir testando para ver qual o valor que some com essa borda ou no m√≠nimo diminui ela. */
}

div.video > iframe{ /* Todo iframe que esteja dentro de uma div com classe v√≠deo. */
    position: absolute; /* √â poss√≠vel colocar o top, left, height e width pelo v√≠deo estar numa posi√ß√£o absoluta. */
    top: 5%; /*Espa√ßo entre o v√≠deo e o in√≠cio do background da div. */
    left: 5%; /*Espa√ßo entre o v√≠deo e a lateral esquerda do background da div. */
    width: 90%; /* Para acompanhar o tamanho da largura do main. Esse valor deixa uma bordinha com a cor do background. */
    height: 90%;
}

aside{
    background-color: var(--cor1);
    padding: 10px;
    border-radius: 10px;
    box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.281);
}

aside > h3{
    background-color: var(--cor4);
    color: white;
    padding: 10px;
    margin: -10px -10px 0px -10px; /* Margem negativa: est√° vazando para fora. Esse efeito fez com que dois componentes se encaixassem perfeitamente formando, visualmente, um bloco. Mas s√≥ visualmente mesmo, porque na real ainda s√£o dois componentes seraparados, apenas bem encaixados. A margem encostou no background. */
    border-radius: 10px 10px 0px 0px;
}

aside > ul{ /* Se colocasse s√≥ 'ul' seria todas as litas do documento e n√£o s√≥ no aside. N√£o √© o caso*/
    list-style-type:'\2714\00A0\00A0'; /* 00A0 ou 0020 √© o espa√ßo, o NBSP, espa√ßo sem quebra. Esse comando n√£o √© compat√≠vel com todo navegador. */
    list-style-position: inside; /* Geralmente √© outside para as bolinhas ficarem do lado de fora, mas neste caso elas tem que ficar do lado de dentro. */
    columns: 2; /* N√∫mero de colunas. N√£o tem medida porque √© uma contagem, n√£o uma unidade de medida. Sempre √© bom checar se a quantidade de colunas que voc√™ escolheu fica ok quando voc√™ espreme a p√°gina e deixa a tela pequena, porque √†s vezes as colunas ficam todas amontoadas, bem estranho! */

}

footer{
    background-color: var(--cor5);
    color: white;
    text-align: center; /* N√£o precisou fazer um 'footer > p' para configurar o par√°grafo do footer. √â isso! =) A mesma coisa para o font-size e o padding. */
    font-size: 0.8em;
    padding: 5px;
}

footer a{
    color: white;
    text-decoration: none;
    font-weight: bolder;
}

footer a:hover{
    text-decoration: underline;
    color: var(--cor1);
}